#define WORLD_CONQUEST_TEK_BONUS_EVENTS
{WORLD_CONQUEST_TEK_BONUS_PICKUP_POINT}
{WORLD_CONQUEST_TEK_BONUS_HERO_FOUND}
{WORLD_CONQUEST_TEK_BONUS_REMOVE_POINT}
{WORLD_CONQUEST_TEK_BONUS_GENERATE_POINTS}
{WORLD_CONQUEST_TEK_BONUS_GOLD_CARRYOVER}
#enddef

#define WORLD_CONQUEST_TEK_BONUS_PICKUP_POINT
[event]
    name=moveto
    first_time_only=no
    [filter]
        side=1,2,3
        [filter_location]
            find_in=bonus.point
        [/filter_location]
    [/filter]
    {WCT_MAP_FIGURE_OUT_POINT bonus $x1 $y1 pick.i}
    {VARIABLE_OP pick.type rand 1..3}
    [if]
        [variable]
            name=pick.type
            equals=1
        [/variable]
    [then]
        {WCT_BONUS_PICK_TRAINING}
    [/then]
    [/if]
    [if]
        [variable]
            name=pick.type
            equals=2
        [/variable]
    [then]
        {WCT_BONUS_PICK_HERO}
    [/then]
    [/if]
    [if]
        [variable]
            name=pick.type
            equals=3
        [/variable]
    [then]
        {WCT_BONUS_PICK_ITEM}
    [/then]
    [/if]
    {CLEAR_VARIABLE pick}
[/event]
#enddef

#define WCT_BONUS_PICK_TRAINING
## dark training reduced chances
{VARIABLE_OP bonus_training rand 4,4,5}
{VARIABLE_OP bonus_training rand "0..$bonus_training"}
## calculate army discipline bonus chance
## each player training level give 3% of advancer trainer. Map 4 always give advanced trainer.
{VARIABLE bonus_trainer.grade 1}
{VARIABLE bonus_trainer.type type}
{VARIABLE bonus_trainer.advanced_chance 0}
{FOREACH player[$side_number].training training_i}
    {VARIABLE_OP bonus_trainer.advanced_chance add "$($player[$side_number].training[$training_i].level*3)"}
{NEXT training_i}
{RANDOM 0..99}
[if]
    [variable]
        name=bonus_trainer.advanced_chance
        greater_than=$random
    [/variable]
    [or]
        [variable]
            name=scenario
            greater_than=3
        [/variable]
    [/or]
[then]
    {VARIABLE bonus_trainer.grade 2}
    {VARIABLE bonus_trainer.type advanced_type}
[/then]
[/if]
## dark training always extra grade after map2
[if]
    [variable]
        name=bonus_training
        equals=5
    [/variable]
    [variable]
        name=scenario
        greater_than=2
    [/variable]
[then]
    {VARIABLE bonus_trainer.grade  "$($scenario-1)"}
    {VARIABLE bonus_trainer.type advanced_type}
[/then]
[/if]
## generate trainer if  have sense 
## reroll if player would surpass maximun level
[if]
    [variable]
        name=player[$side_number].training[$bonus_training].level
        less_than="$($wct.trainer[$bonus_training].grade.length-$bonus_trainer.grade)"
    [/variable]
[then]
    {WCT_FOUND_HERO $wct.trainer[$bonus_training].$bonus_trainer.type|}
    [message]
        role=found        
        message=$wct.trainer[$bonus_training].dialogue
    [/message]
    [kill]
        role=found
    [/kill]
    {VARIABLE_OP player[$side_number].training[$bonus_training].level add $bonus_trainer.grade}
    {VARIABLE wct.trainer[$bonus_training].grade[$player[$side_number].training[$bonus_training].level].message[0].image {IMG_TRAINING_FOUND $wct.trainer[$bonus_training].image}}
    {VARIABLE wct.trainer[$bonus_training].grade[$player[$side_number].training[$bonus_training].level].message[0].speaker narrator}
    [insert_tag]
        name=message
        variable=wct.trainer[$bonus_training].grade[$player[$side_number].training[$bonus_training].level].message
    [/insert_tag]
    [sound]
        name=flail-miss.ogg
    [/sound]
    {CLEAR_VARIABLE bonus_training,bonus_trainer}
[/then]
[else]
    {VARIABLE_OP pick.type rand 2..3}
[/else]
[/if]
#enddef

#define WCT_BONUS_PICK_HERO
{RANDOM 0.."$($bonus.Heroes.length-1)"}
{WCT_FOUND_HERO $bonus.Heroes[$random].type}
[message]
    role=found       
    message=$bonus.Heroes[$random|].founddialogue
[/message]
## unit use reply based in hero type found
## some types give alternative reply to some units
{VARIABLE reply $bonus.Heroes[$random].reply}
[if]
    {VARIABLE_CONDITIONAL reply equals $null}
[then]
    {VARIABLE reply {STR_HERO_REPLY}}
[/then]
[/if]
{FOREACH bonus.Heroes[$random].alt_reply reply_i}
    [if]
        [variable]
            name=bonus.Heroes[$random].alt_reply[$reply_i].race
            contains=$unit.race
        [/variable]
        [or]
            [variable]
                name=bonus.Heroes[$random].alt_reply[$reply_i].gender
                equals=$unit.gender
            [/variable]
        [/or]
    [then]
        {VARIABLE reply $bonus.Heroes[$random].alt_reply[$reply_i].reply}
    [/then]
    [/if]
{NEXT reply_i}
[message]
    speaker=unit
    message=$reply
[/message]
{CLEAR_VARIABLE reply}
[modify_unit]
    [filter]
        role=found
    [/filter]
    role=hero	
[/modify_unit]
{CLEAR_VARIABLE bonus.Heroes[$random]}
#enddef

#define WCT_BONUS_PICK_ITEM
[message]
    speaker=unit
    message={STR_BONUS_ITEM_FOUND}
[/message]
[fire_event]
    name=wct_bonus_remove_point
[/fire_event]
{RANDOM 0.."$($bonus.artifact.length-1)"}
{WCT_ARTIFACT_DROP_MESSAGE $bonus.artifact[$random].type}
{WCT_ARTIFACT_ITEM $x1 "$($y1-1)" $bonus.artifact[$random].type}
{CLEAR_VARIABLE bonus.artifact[$random]}
#enddef

#define WCT_FOUND_HERO TYPE
{VARIABLE wct.hero.type {TYPE}}
[fire_event]
    name=wct_bonus_hero_found
    [primary_unit]
        id=$unit.id
    [/primary_unit]
[/fire_event]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_HERO_FOUND
[event]
    name=wct_bonus_hero_found
    first_time_only=no
    [message]
        speaker=unit
        message={STR_BONUS_HERO_FOUND}
    [/message]
    [fire_event]
        name=wct_bonus_remove_point
    [/fire_event]
    {VARIABLE wct.hero.role found}
    [fire_event]
        name=wct_hero
        [primary_unit]
            id=$unit.id
        [/primary_unit]
    [/fire_event]
    ## hero found and unit in bonus point face each other
    [animate_unit]
        flag=standing
        [filter]
            role=found
        [/filter]
        [facing]
            x,y=$unit.x,$unit.y
        [/facing]
    [/animate_unit]
    [animate_unit]
        flag=standing
        [filter]
            x,y=$unit.x,$unit.y
        [/filter]
        [facing]
            [filter]
                role=found
            [/filter]
        [/facing]
    [/animate_unit]
[/event]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_REMOVE_POINT
[event]
    name=wct_bonus_remove_point
    first_time_only=no
    [remove_item]
        x,y=$bonus.point[$pick.i].x,$bonus.point[$pick.i].y
    [/remove_item]
    ## change terrain if scenery is windmill/campfire
    [terrain]
        x,y=$bonus.point[$pick.i].x,$bonus.point[$pick.i].y
        [and]
            terrain=*^Wm,*^Ecf
        [/and]
        terrain=Gs
        layer=overlay
    [/terrain]
    [item]
        x,y=$bonus.point[$pick.i].x,$bonus.point[$pick.i].y
        image=scenery/rubble.png
    [/item]
    {CLEAR_VARIABLE bonus.point[$pick.i]}
[/event]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_POINTS
[fire_event]
    name=wct_bonus_generate_points
[/fire_event]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_GENERATE_POINTS
[event]
    name=wct_bonus_generate_points
    [store_map_dimensions]
        variable=point.limit
    [/store_map_dimensions]
    {REPEAT_IT $players point_i}
        {WCT_BONUS_CHOSE_LOCATION}
        {WCT_BONUS_CHOSE_SCENERY}
        {WCT_PLACE_BONUS}
    {NEXT point_i}
    {CLEAR_VARIABLE point}
[/event]
#enddef

#define WCT_BONUS_CHOSE_LOCATION
## look for eligible spots
[store_locations]
    variable=point.location
    terrain= G*,Hh,Uu,Uh,Dd,Ds,R*,Mm,Md,Ss,Hd,Hhd,Ww,Wwt,Wwg,Ds^Esd,Ur
    ## no adjacent to village, deep water, chasm or walls
    [filter_adjacent_location]
        terrain=Wo*,M*^Xm,Xu*,Q*,Mv,*^V*
        count=0
    [/filter_adjacent_location]
    [and]
        ## no out/at map borders
        [not]
            x=0,1,$point.limit.width,"$($point.limit.width+1)"
        [/not]
        [not]
            y=0,1,$point.limit.height,"$($point.limit.height+1)"
        [/not]
        ## not too close to a keep
        [not]
            terrain=K*^*
            radius="$(4+$scenario)"
        [/not]
        ## not too close to other bonus
        [not]
            find_in=bonus.point
            radius="$(9+$scenario)"
        [/not]
        ## just isolated mountains
        [not]
            terrain=M*
            [filter_adjacent_location]
                terrain=M*
            [/filter_adjacent_location]
        [/not]
        ## no swamps near sand or water
        [not]
            terrain=Ss
            [filter_adjacent_location]
                terrain=Wo*,Ww,Wwg,Wwt,Ds,Ds^Esd
            [/filter_adjacent_location]
        [/not]
        ## no river/lake water next to 2 coast or frozen
        ## (it means restrict lilies image)
        [not]
            terrain=Ww*
            [and]
                [filter_adjacent_location]
                    terrain=Ha^*,A*^*,Ms^*
                [/filter_adjacent_location]
                [filter_adjacent_location]
                    terrain=W*^*
                    count=0-3
                [/filter_adjacent_location]
                [or]
                    [filter_adjacent_location]
                        terrain=W*^*
                        count=4
                    [/filter_adjacent_location]
                [/or]
            [/and]
            [and]
                [not]
                    {WCT_MAP_FILTER_OCEANIC}
                [/not]
            [/and]
        [/not]
    [/and]
[/store_locations]
## assuming there are eligible spots, pick one at random
{RANDOM 0.."$($point.location.length-1)"}
[set_variables]
    name=point.location
    to_variable=point.location[$random]
[/set_variables]
#enddef

#define ADD_SCENERY SCENERY
{VARIABLE point.scenery "{SCENERY},$point.scenery"}
#enddef

#define WCT_BONUS_CHOSE_SCENERY
## determine possible scenery values based on terrain
[switch]
    variable=point.location.terrain
    [case]
        value=Re,Rd,Rb,Rr,Rrc
        {VARIABLE point.scenery "well_f,signpost,rock_cairn,obelisk_post,rock_cairn2,monolith2,temple2,shop"}
    [/case]
    [case]
        value=Ww,Wwt,Wwg
        {VARIABLE point.scenery "ship1,ship2"}
    [/case]
    [case]
        value=Hh,Hhd
        {VARIABLE point.scenery "temple,shelter,village,monolith1,monolith4"}
    [/case]
    [case]
        value=Mm,Md
        {VARIABLE point.scenery "mine,mine,mine,mine,mine,doors,doors,doors,doors,doors,temple3,temple4"}
    [/case]
    [case]
        value=Uu
        {VARIABLE point.scenery "altar,coffin,bones,rock_cairn,trapdoor,crystal_well,monolith2"}
    [/case]
    [case]
        value=Ur
        {VARIABLE point.scenery "altar,bones,rock_cairn,well,monolith2,monolith3,tent1"}
    [/case]
    [case]
        value=Uh
        {VARIABLE point.scenery "altar,coffin,bones,rock_cairn,trapdoor,monolith2,crystals_altar"}
    [/case]
    [case]
        value=Ds,Ds^Esd
        {VARIABLE point.scenery "rock1,rock4,bones,rock1,tent2,tent1,rock4,burial"}
    [/case]
    [case]
        value=Dd
        {VARIABLE point.scenery "rock4,bones,rock1,tent2,tent1,burial"}
    [/case]
    [case]
        value=Hd
        {VARIABLE point.scenery "tower_r1,tower_r4,bones,tent2,tent1,rock4,burial,temple"}
    [/case]
    [case]
        value=Ss
        {VARIABLE point.scenery "bones,rock3,rock3,burial,lilies,bones"}
    [/case]
    [else]
        {VARIABLE point.scenery "well_f,temple,tent2,tent1,village,monolith3,burial"}
    [/else]
[/switch]
## chance of rock cairn on isolated hills
[if]
    [have_location]
        terrain=Hh,Hhd
        find_in=point.location
        [filter_adjacent_location]
            terrain=H*^*
            count=0
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY rock_cairn}
[/then]
[/if]
## chance of dolmen on grass not next to forest
[if]
    [have_location]
        terrain=G*
        find_in=point.location
        [filter_adjacent_location]
            terrain=*^F*
            count=0
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY dolmen_grass}
[/then]
[/if]
## chances of green temple on gras next to swamp, hills and forest
[if]
    [have_location]
        terrain=G*
        find_in=point.location
        [filter_adjacent_location]
            terrain=Ss
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=Hh^*,Ha^*
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=G*^F*,A*^F*,G*^Uf
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY temple_green_g,temple_green_g,temple_green_g,temple_green_g2,temple_green_g2}
[/then]
[/if]
## chances of green temple in hills next to swamp or cold
[if]
    [have_location]
        terrain=Hh
        find_in=point.location
        [filter_adjacent_location]
            terrain=Ss,Ai,A*^*,Ha^*,Ms^*
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY temple_green_h,temple_green_h,temple_green_h,temple_green_h2,temple_green_h2}
[/then]
[/if]
## chance of temple in hills next to mountain
[if]
    [have_location]
        terrain=Hh,Hhd
        find_in=point.location
        [filter_adjacent_location]
            terrain=M*^*
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY temple4,temple4}
[/then]
[/if]
## chances of detritus and lilies on some swamps
[if]
    [have_location]
        terrain=Ss
        find_in=point.location
        [filter_adjacent_location]
            terrain=*^F*,C*^*,K*^*
            count=0
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY detritus,detritus2,lilies2}
[/then]
[/if]
## chances of buildings next to road
[if]
    [variable]
        name=bonus.theme
        not_equals=volcanic,clayey
    [/variable]
    [have_location]
        terrain=G*,Hh*
        find_in=point.location
        [filter_adjacent_location]
            terrain=R*^*,W*^Bsb*
            count=2-6
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=*^F*
            count=0
        [/filter_adjacent_location]
        [and]
            terrain=*^Vh,*^Vhh,*^Ve,*^Vl,*^Vhc,*^Vd,*^Vy*,*^Vz*
            radius=7
        [/and]
    [/have_location]
[then]
    {ADD_SCENERY rock_cairn,temple2_g,shop_g}
[/then]
[/if]
## high chances of windmill and oak surronded by flat
[if]
    [have_location]
        terrain=Gg,Gs,Gll
        find_in=point.location
        [filter_adjacent_location]
            terrain= G*,R*,R*^Em,G*^Efm,Wwf,G*^Em,G*^Eff,*^Gvs,W*^B*,Ce,Ch
            count=6
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY windmill,windmill,windmill,windmill,windmill,windmill,windmill,oak1,oak2,oak3,oak4,oak5,oak6,oak7}
[/then]
[/if]
## remove chances of ships on river/lake coast for lilies
[if]
    [have_location]
        terrain=Ww,Wwt,Wwg
        find_in=point.location
        [not]
            {WCT_MAP_FILTER_OCEANIC}
        [/not]
        [filter_adjacent_location]
            terrain=W*^*
            count=0-3
        [/filter_adjacent_location]
    [/have_location]
[then]
    {VARIABLE point.scenery "lilies"}
[/then]
[/if]
## different meaning for roads in some maps
[if]
    [variable]
        name=bonus.theme
        equals=clayey
    [/variable]
[then]
    [if]
        [have_location]
            terrain=R*
            find_in=point.location
        [/have_location]
    [then]
        {VARIABLE point.scenery "well_f,temple,tent2,tent1,village,monolith3,burial"}
    [/then]
    [/if]
[/then]
[/if]
[if]
    [variable]
        name=bonus.theme
        equals=volcanic
    [/variable]
[then]
    [if]
        [have_location]
            terrain=Rd,Rb
            find_in=point.location
        [/have_location]
    [then]
        {VARIABLE point.scenery "bones,rock_cairn,well_f,monolith2,tent1,tent1,tent2,monolith3,well_f,rock_cairn,rock_cairn2,monolith2,temple,dolmen_grass,monolith1b,monolith4b"}
    [/then]
    [/if]
    [if]
        [have_location]
            terrain=Ur
            find_in=point.location
        [/have_location]
    [then]
        {VARIABLE point.scenery "bones,rock_cairn,well_f,monolith2,tent1,monolith3,well_f,rock_cairn2,monolith2,temple,monolith1b,monolith4b"}
    [/then]
    [/if]
[/then]
[/if]
## high chances of lighthouse near deepwater
[if]
    [have_location]
        terrain=Wo*
        [and]
            terrain=!,Ww*,U*,Ss
            find_in=point.location
            radius=2
            [filter_radius]
                terrain=!,M*^*,H*^*,X*,*^F*
            [/filter_radius]
        [/and]
        [and]
            {WCT_MAP_FILTER_OCEANIC}
        [/and]
    [/have_location]
[then]
    {ADD_SCENERY lighthouse,lighthouse,lighthouse}
[/then]
[/if]
## chance of lighthouse near reef
[if]
    [have_location]
        terrain=Wwr*
        [and]
            terrain=!,Ww*,U*,Ss
            find_in=point.location
            radius=2
            [filter_radius]
                terrain=!,M*^*,H*^*,X*,*^F*
            [/filter_radius]
        [/and]
        [and]
            {WCT_MAP_FILTER_OCEANIC}
        [/and]
    [/have_location]
[then]
    {ADD_SCENERY lighthouse}
[/then]
[/if]
## high chances of light signal on cliff near deepwater
[if]
    [have_location]
        terrain=Wo*,Wwr*
        [and]
            terrain=Hh,Hhd,Mm,Md
            find_in=point.location
            radius=2
            [filter_radius]
                terrain=!,M*^*,H*^*,X*,*^F*
            [/filter_radius]
        [/and]
        [filter_adjacent_location]
            terrain=Ww*^*,Ds*^*,S*^*
        [/filter_adjacent_location]
        [and]
            {WCT_MAP_FILTER_OCEANIC}
        [/and]
    [/have_location]
[then]
    {ADD_SCENERY campfire,campfire,lighthouse,lighthouse,lighthouse}
[/then]
[/if]
## improve chances of light signal next to water
[if]
    [have_location]
        find_in=point.location
        [filter_adjacent_location]
            terrain=W*^*
        [/filter_adjacent_location]
    [/have_location]
[then]
    [if]
        [variable]
            name=point.scenery
            contains=lighthouse
        [/variable]
    [then]
        {ADD_SCENERY lighthouse,lighthouse,lighthouse,lighthouse}
    [/then]
    [/if]
    [if]
        [variable]
            name=point.scenery
            contains=campfire
        [/variable]
    [then]
        {ADD_SCENERY campfire,campfire,campfire}
    [/then]
    [/if]
[/then]
[/if]
## chances of tower on dessert far from village
[if]
    [have_location]
        terrain=Dd,Hd
        find_in=point.location
        [and]
            [not]
                terrain=*^V*
                radius=5
            [/not]
        [/and]
    [/have_location]
[then]
    {ADD_SCENERY tower_r1,tower_r4}
[/then]
[/if]
## chance of outpost in sands 
[if]
    [have_location]
        terrain=Ds,Hd,Dd
        find_in=point.location
        [filter_adjacent_location]
            terrain=D*^*,Hd,G*,R*,Ur
            adjacent=se
            count=1
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=D*^*,H*^*,G*^*,R*,Ur,M*^*
            adjacent=nw,sw,n,s,ne
            count=5
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=D*^*,Hd*^*
            count=1-6
        [/filter_adjacent_location]
    [/have_location]
[then]
    {ADD_SCENERY outpost}
[/then]
[/if]
## chances of dead oak in desolated
[if]
    [have_location]
        terrain=Dd
        find_in=point.location
        [filter_adjacent_location]
            terrain=Dd,Ds*^*,Hd,S*
            count=4-6
        [/filter_adjacent_location]
        [filter_adjacent_location]
            terrain=*^F*,C*^*,K*^*
            count=0
        [/filter_adjacent_location]
        [or]
            terrain=Ds,Rd
            find_in=point.location
            [filter_adjacent_location]
                terrain=Dd,Ds*^*,Hd,S*,Rd
                count=6
            [/filter_adjacent_location]
            [and]
                [not]
                    terrain=W*^*
                    radius=2
                [/not]
            [/and]
        [/or]
    [/have_location]
[then]
    {ADD_SCENERY oak_detritus,oak_detritus,oak_detritus,oak_detritus,oak_detritus2,oak_detritus2,oak_detritus2,oak_detritus2}
[/then]
[/if]
## pick random scenery value from our list
{VARIABLE_OP point.scenery rand $point.scenery}
#enddef

#define WCT_PLACE_BONUS
## use scenery value as pointer for name and image
[switch]
    variable=point.scenery
    ## windmill or campfire dont have image, just change terrain
    [case]
        value=windmill
        [terrain]
            find_in=point.location
            terrain=$point.location.terrain|^Wm
        [/terrain]
    [/case]
    [case]
        value=campfire
        [terrain]
            find_in=point.location
            terrain=$point.location.terrain|^Ecf
        [/terrain]
    [/case]
    ## place image
    [else]
        [item]
            find_in=point.location
            image=$bonus.img.$point.scenery|
        [/item]
    [/else]
[/switch]
## pick random location name from scenery list
{VARIABLE_OP point.label.location_name rand $bonus.str.$point.scenery|}
## add random proper name, create and place label
{WCT_RANDOM_NAME point.label.proper_name}
[label]
    x,y=$point.location.x,$point.location.y
    text={STR_COLOR_BONUS {STR_BONUS_LABEL}}
[/label]
## set bonus point coordinates
[set_variables]
    name=bonus.point
    mode=append
    [value]
        x=$point.location.x
        y=$point.location.y
    [/value]
[/set_variables]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_GOLD_CARRYOVER
[event]
    name=victory
    carryover_report=false
    ## calculate turns early finished
    {VARIABLE carryover $scenario}
    {VARIABLE_OP carryover multiply "$(7-$players)"}
    {VARIABLE_OP carryover add 20}
    {VARIABLE_OP carryover sub $turn_number}
    ## calculate gold bonus not based in villages (fixed values)
    {VARIABLE_OP carryover multiply $bonus.gold.map$scenario|}
    {CLEAR_VARIABLE $bonus.gold.map$scenario|}
    ## add each player gold and spread it equaly if positive
    [store_side]
        side=1,2,3
    [/store_side]
    {VARIABLE players_gold 0}
    {FOREACH side side_i}
        {VARIABLE_OP players_gold add $side[$side_i].gold}
    {NEXT side_i}
    {CLEAR_VARIABLE side}
    [if]
        [variable]
            name=players_gold
            less_than=0
        [/variable]
    [then]
        {VARIABLE players_gold 0}
    [/then]
    [/if]
    {VARIABLE_OP players_gold divide $players}
    {VARIABLE_OP carryover add $players_gold}
    {CLEAR_VARIABLE players_gold}
    ## apply 15% carryover percentage
    {VARIABLE_OP carryover multiply 15}
    {VARIABLE_OP carryover divide 100}
[/event]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_SCENARIO_GOLD
[event]
    name=start
    {FOREACH_FROM player 1 side_i}
        [gold]
            side=$side_i
            amount="$($carryover+$difficulty.extra_gold)"
        [/gold]
    {NEXT side_i}
    {CLEAR_VARIABLE carryover}
[/event]
#enddef

#define WORLD_CONQUEST_TEK_BONUS_GOLD_DEFINITIONS
## these values were average village amount in Classic WC
[gold]
    map1=21
    map2=34
    map3=47
    map4=57
[/gold]
#enddef


